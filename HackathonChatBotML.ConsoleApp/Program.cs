// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using HackathonChatBotML.Model;
using Microsoft.Extensions.Configuration;

namespace HackathonChatBotML.ConsoleApp
{
    class Program
    {
        public static IConfigurationRoot configuration;

        static void Main(string[] args)
        {
            configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
                .AddJsonFile("appsettings.json", false)
                .Build();

            Console.WriteLine("Press ESC to exit\nTo proceed press ENTER");

            while (Console.ReadKey().Key != ConsoleKey.Escape)
            {
                Console.WriteLine();
                Console.WriteLine("Train model - 1\nRun test - 2");
                var option = Console.ReadLine();

                if(option == "1")
                {
                    ModelBuilder.CreateModel(configuration["TrainDataFilePath"], configuration["ModelFilePath"]);
                }
                else if (option == "2")
                {
                    TestModel();
                }
                else
                {
                    Console.WriteLine("Wrong option!");
                }

                Console.WriteLine("Press ESC to exit\nTo proceed press ENTER");
            }
        }

        private static void TestModel()
        {
            var testResult = new List<string>();
            var dataLines = File.ReadAllLines(configuration["TestDataFilePath"]);
            // start from second line, to skip headers
            for (var i = 1; i < dataLines.Length; i++)
            {
                var item = dataLines[i].Split(';');
                var question = item[2];
                var correctCategory = item[1];
                var res = ConsumeModel.Predict(new ModelInput { Question = question });
                testResult.Add($"{question};{correctCategory};{res.Prediction};{string.Join("**", res.Score)}");
            }

            var resultFilePath = Path.Combine(/*configuration["TestOutputPath"],*/ $"TestOutput-{DateTime.Now.ToString("HHmmss")}.csv");
            File.AppendAllLines(resultFilePath, testResult);
        }
    }
}
